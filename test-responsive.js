// Script de test pour v√©rifier le responsive design
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç Test de Responsive Design - –£–†–ê–õ–°–ò–õ–¢–†–ê–ù–°');

// Fonction pour v√©rifier les breakpoints
function checkBreakpoints() {
    const width = window.innerWidth;
    console.log(`üì± Largeur actuelle: ${width}px`);

    if (width < 640) {
        console.log('üì± Mobile (< 640px)');
    } else if (width < 768) {
        console.log('üì± Small Tablet (640px - 767px)');
    } else if (width < 1024) {
        console.log('üì± Tablet (768px - 1023px)');
    } else if (width < 1280) {
        console.log('üíª Desktop (1024px - 1279px)');
    } else {
        console.log('üñ•Ô∏è Large Desktop (1280px+)');
    }
}

// Fonction pour v√©rifier les √©l√©ments critiques
function checkCriticalElements() {
    const issues = [];

    // V√©rifier la navigation
    const header = document.querySelector('header');
    if (header) {
        const mobileMenu = header.querySelector('.lg\\:hidden');
        if (!mobileMenu) {
            issues.push('‚ùå Menu mobile manquant');
        } else {
            console.log('‚úÖ Menu mobile pr√©sent');
        }
    }

    // V√©rifier les boutons
    const buttons = document.querySelectorAll('button');
    buttons.forEach((btn, index) => {
        const rect = btn.getBoundingClientRect();
        if (rect.height < 44) {
            issues.push(`‚ùå Bouton ${index + 1} trop petit (${rect.height}px)`);
        }
    });

    // V√©rifier le texte
    const textElements = document.querySelectorAll('p, h1, h2, h3, h4, h5, h6');
    textElements.forEach((el, index) => {
        const fontSize = parseInt(window.getComputedStyle(el).fontSize);
        if (fontSize < 14) {
            issues.push(`‚ùå Texte ${index + 1} trop petit (${fontSize}px)`);
        }
    });

    // V√©rifier les images
    const images = document.querySelectorAll('img');
    images.forEach((img, index) => {
        if (!img.complete || img.naturalWidth === 0) {
            issues.push(`‚ùå Image ${index + 1} non charg√©e`);
        }
    });

    // V√©rifier le scroll horizontal
    if (document.documentElement.scrollWidth > window.innerWidth) {
        issues.push('‚ùå Scroll horizontal d√©tect√©');
    } else {
        console.log('‚úÖ Pas de scroll horizontal');
    }

    return issues;
}

// Fonction pour tester les interactions
function testInteractions() {
    console.log('üß™ Test des interactions...');

    // Test du menu mobile
    const mobileMenuBtn = document.querySelector('.lg\\:hidden button');
    if (mobileMenuBtn) {
        console.log('‚úÖ Bouton menu mobile trouv√©');
    }

    // Test des liens
    const links = document.querySelectorAll('a[href]');
    console.log(`‚úÖ ${links.length} liens trouv√©s`);

    // Test des formulaires
    const forms = document.querySelectorAll('form');
    console.log(`‚úÖ ${forms.length} formulaires trouv√©s`);
}

// Fonction pour v√©rifier les performances
function checkPerformance() {
    console.log('‚ö° V√©rification des performances...');

    // V√©rifier les images optimis√©es
    const images = document.querySelectorAll('img');
    let optimizedImages = 0;

    images.forEach(img => {
        if (img.sizes || img.srcset) {
            optimizedImages++;
        }
    });

    console.log(`‚úÖ ${optimizedImages}/${images.length} images optimis√©es`);

    // V√©rifier les polices
    const fonts = document.querySelectorAll('link[rel="preload"][as="font"]');
    console.log(`‚úÖ ${fonts.length} polices pr√©charg√©es`);
}

// Ex√©cuter tous les tests
function runAllTests() {
    console.log('\nüöÄ D√©marrage des tests de responsive design...\n');

    checkBreakpoints();

    console.log('\nüîç V√©rification des √©l√©ments critiques...');
    const issues = checkCriticalElements();

    if (issues.length > 0) {
        console.log('\n‚ö†Ô∏è Probl√®mes d√©tect√©s:');
        issues.forEach(issue => console.log(issue));
    } else {
        console.log('\n‚úÖ Aucun probl√®me critique d√©tect√©');
    }

    console.log('\nüß™ Test des interactions...');
    testInteractions();

    console.log('\n‚ö° V√©rification des performances...');
    checkPerformance();

    console.log('\n‚úÖ Tests termin√©s!');
}

// Ex√©cuter les tests automatiquement
runAllTests();

// Ajouter un listener pour les changements de taille d'√©cran
window.addEventListener('resize', () => {
    console.log('\nüìê Redimensionnement d√©tect√©...');
    checkBreakpoints();
});

// Instructions pour l'utilisateur
console.log('\nüìã Instructions:');
console.log('1. Redimensionnez la fen√™tre pour tester diff√©rents breakpoints');
console.log('2. Testez sur mobile/tablette avec les outils de d√©veloppement');
console.log('3. V√©rifiez que tous les √©l√©ments sont lisibles et accessibles');
console.log('4. Testez les interactions (menu, formulaires, liens)');
console.log('5. V√©rifiez qu\'il n\'y a pas de scroll horizontal');

// Exporter les fonctions pour utilisation manuelle
window.responsiveTest = {
    checkBreakpoints,
    checkCriticalElements,
    testInteractions,
    checkPerformance,
    runAllTests
};